#!/usr/bin/env python2
import select
import errno
import socket
import netifaces
import struct
import sys
import os
import argparse
import time
import traceback
import pwnlib
from threading import Thread

PORT = 1337

parser = argparse.ArgumentParser(
    description = "Peek",
)

parser.add_argument(
    '--verbose', '-v',
    action='store_true',
    help='Verbose output',
    )

parser.add_argument(
    '--port',
    type=int,
    default=PORT,
    help='Port to request file list on',
    )

parser.add_argument(
    'host',
    metavar='<host>',
    default='<broadcast>',
    nargs='?',
    help='The host to fetch files from (default: broadcast)',
    )

args = parser.parse_args()

def _log(emblem, msg):
    t = time.strftime('%T', time.localtime())
    print >>sys.stderr, '%s %s %s' % \
        (pwnlib.term.text.magenta(t),
         emblem, msg)

def debug(s):
    if args.verbose:
        _log(pwnlib.term.text.cyan('D'), s)

def info(s):
    _log(pwnlib.term.text.blue('I'), s)

def warn(s):
    _log(pwnlib.term.text.yellow('W'), s)

def err(s):
    _log(pwnlib.term.text.red('E'), s)

lsock = socket.socket(socket.AF_INET,
                      socket.SOCK_STREAM)
lsock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
lsock.setblocking(False)
lsock.bind(('', 0))
lport = lsock.getsockname()[1]
lsock.listen(10)

def request_file_list():
    addr = args.host
    port = args.port
    sock = socket.socket(socket.AF_INET,
                         socket.SOCK_DGRAM,
                         socket.IPPROTO_UDP)
    sock.bind(('', 0))
    sock.setsockopt(socket.SOL_SOCKET, socket.SO_BROADCAST, 1)
    data = 'POKEME' + struct.pack('!H', lport)
    sock.sendto(data, (addr, port))

def recvn(sock, n):
    data = ''
    while len(data) < n:
        data += sock.recv(n - len(data))
    return data

def recvuntil(sock, stop, drop=True):
    data = ''
    while not data.endswith(stop):
        data += sock.recv(1)
    if drop:
        data = data[:-len(stop)]
    return data

pwnlib.term.init()

request_file_list()

files = []
cur_file = 0
files_h = []
transfers = set()

class Transfer:
    def __init__(self, f):
        addr, port, path = f
        base, ext = os.path.splitext(os.path.basename(path))
        path = base + ext
        n = 1
        while os.path.exists(path):
            path = '%s.%d%s' % (base, n, ext)
            n += 1
        self.path = path

        try:
            self.fd = open(path, 'w')
        except IOError:
            err('Could not open "%s" for writing' % path)
            return

        self.addr = addr
        self.port = port
        self.sock = socket.socket(socket.AF_INET,
                                  socket.SOCK_STREAM)
        try:
            self.sock.connect((addr, port))
        except socket.error as e:
            if e.errno == errno.ECONNREFUSED:
                warn('%s refused connection on port %d' % (addr, port))
                return
            raise
        self.sock.setblocking(False)

        self.numb = 0
        self.start = time.time()
        self.last_update = 0
        prefix = pwnlib.term.text.magenta('[Active]') + \
                 pwnlib.term.text.blue(' I ') + \
                 '"%s" <= %s (' % (path, addr)
        self.h_prefix = pwnlib.term.output(prefix, float=True, priority=5)
        self.h_progress = pwnlib.term.output('', float=True, priority=5)
        self.h_suffix = pwnlib.term.output(')\n', float=True, priority=5)
        transfers.add(self)

    def fileno(self):
        return self.sock.fileno()

    def process(self):
        data = self.sock.recv(4096)
        if not data:
            self.finish()
            info('"%s" <= %s completed' % (self.path, self.addr))
            return
        self.numb += len(data)
        self.fd.write(data)
        self.update()

    def finish(self):
        self.h_prefix.delete()
        self.h_progress.delete()
        self.h_suffix.delete()
        self.sock.close()
        self.fd.close()
        transfers.discard(self)

    def update(self):
        now = time.time()
        if now - self.last_update > 0.1:
            bps = self.numb / (now - self.start)
            progress = '%s, %s/s' % \
                       (pwnlib.util.misc.size(self.numb),
                        pwnlib.util.misc.size(bps))
            self.h_progress.update(progress)
            self.last_update = now

def fmt_file(f, selected=False):
    addr, port, path = f
    host = pwnlib.term.text.magenta('%15s:%-5d ' % (addr, port))
    if selected:
        path = pwnlib.term.text.reverse(path)
    return host + path + '\n'

def finish():
    for h in files_h:
        h.delete()
    for t in transfers:
        t.sock.close()

def loop():
    global cur_file
    try:
        rfds, _, _ = select.select([sys.stdin, lsock] + list(transfers),
                                   [], [], 1)
    except select.error as e:
        if e[0] != errno.EINTR:
            raise
        return

    for fd in rfds:
        if isinstance(fd, Transfer):
            fd.process()

    if lsock in rfds:
        sock, (addr, _) = lsock.accept()
        debug('Receiving file list from %s' % addr)
        while True:
            port = struct.unpack('!H', recvn(sock, 2))[0]
            if port == 0:
                sock.close()
                break
            path = recvuntil(sock, '\x00', drop=True)
            f = (addr, port, path)
            if f not in files:
                h = pwnlib.term.output(fmt_file(f, not files), float=True)
                files.append(f)
                files_h.append(h)

    if sys.stdin in rfds:
        k = pwnlib.term.key.get()
        if k == 'r':
            info('Requesting files')
            request_file_list()
        elif k == '<up>':
            if cur_file > 0:
                files_h[cur_file].update(fmt_file(files[cur_file]))
                cur_file -= 1
                files_h[cur_file].update(fmt_file(files[cur_file],
                                                  selected=True))
        elif k == '<down>':
            if cur_file < len(files) - 1:
                files_h[cur_file].update(fmt_file(files[cur_file]))
                cur_file += 1
                files_h[cur_file].update(fmt_file(files[cur_file],
                                                  selected=True))

        elif k in ('<space>', '<enter>') and files:
            Transfer(files[cur_file])

while True:
    try:
        loop()
    except KeyboardInterrupt:
        finish()
        info('Interrupted')
        break
    except Exception as e:
        err('An exception occurred: %r' % e)
        for line in traceback.format_exc().splitlines():
            debug(line)
